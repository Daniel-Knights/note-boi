// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Account > changePassword > Changes password for currently logged in account > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > changePassword > Changes password for currently logged in account > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > changePassword > Changes password for currently logged in account > Storage.get('THEME') 1`] = `null`;

exports[`Account > changePassword > Changes password for currently logged in account > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > changePassword > Changes password for currently logged in account > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > changePassword > Changes password for currently logged in account > Storage.get('USERNAME') 1`] = `"d"`;

exports[`Account > changePassword > Changes password for currently logged in account > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"d","password":"1","notes":[],"deleted_notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/login",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "note": {
          "content": {
            "body": "",
            "delta": {
              "ops": [],
            },
            "title": "",
          },
          "id": "id",
          "timestamp": 0,
        },
      },
      "name": "new_note",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "notes": [
          {
            "content": {
              "body": "",
              "delta": {
                "ops": [],
              },
              "title": "",
            },
            "id": "id",
            "timestamp": 0,
          },
        ],
      },
      "name": "sync_local_notes",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": "{"current_password":"2","new_password":"1","notes":[{"id":"id","timestamp":0,"content":"content"}]}",
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "d",
        },
        "method": "PUT",
      },
      "name": "/account/change-password",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": "{"current_password":"1","new_password":"2","notes":[{"id":"id","timestamp":0,"content":"content"}]}",
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "d",
        },
        "method": "PUT",
      },
      "name": "/account/change-password",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
]
`;

exports[`Account > changePassword > Changes password for currently logged in account > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > changePassword > Changes password for currently logged in account > mockDb 1`] = `
{
  "deletedNotes": [],
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > changePassword > Changes password for currently logged in account > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [
    {
      "content": {
        "body": "",
        "delta": {
          "ops": [],
        },
        "title": "",
      },
      "id": "id",
      "timestamp": 0,
    },
  ],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > changePassword > Changes password for currently logged in account > openedPopup 1`] = `undefined`;

exports[`Account > changePassword > Changes password for currently logged in account > selectedTheme 1`] = `"System"`;

exports[`Account > changePassword > Changes password for currently logged in account > syncState 1`] = `
{
  "appError": AppError {
    "code": 0,
    "display": undefined,
    "message": undefined,
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": undefined,
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": true,
  "loadingCount": 0,
  "newPassword": "",
  "password": "",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "d",
}
`;

exports[`Account > changePassword > Changes password for currently logged in account > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > changePassword > Sets and resets loading state > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > changePassword > Sets and resets loading state > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > changePassword > Sets and resets loading state > Storage.get('THEME') 1`] = `null`;

exports[`Account > changePassword > Sets and resets loading state > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > changePassword > Sets and resets loading state > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > changePassword > Sets and resets loading state > Storage.get('USERNAME') 1`] = `"d"`;

exports[`Account > changePassword > Sets and resets loading state > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"d","password":"1","notes":[],"deleted_notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/login",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "note": {
          "content": {
            "body": "",
            "delta": {
              "ops": [],
            },
            "title": "",
          },
          "id": "id",
          "timestamp": 0,
        },
      },
      "name": "new_note",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "notes": [
          {
            "content": {
              "body": "",
              "delta": {
                "ops": [],
              },
              "title": "",
            },
            "id": "id",
            "timestamp": 0,
          },
        ],
      },
      "name": "sync_local_notes",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": "{"current_password":"1","new_password":"2","notes":[{"id":"id","timestamp":0,"content":"content"}]}",
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "d",
        },
        "method": "PUT",
      },
      "name": "/account/change-password",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
]
`;

exports[`Account > changePassword > Sets and resets loading state > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > changePassword > Sets and resets loading state > mockDb 1`] = `
{
  "deletedNotes": [],
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > changePassword > Sets and resets loading state > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [
    {
      "content": {
        "body": "",
        "delta": {
          "ops": [],
        },
        "title": "",
      },
      "id": "id",
      "timestamp": 0,
    },
  ],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > changePassword > Sets and resets loading state > openedPopup 1`] = `undefined`;

exports[`Account > changePassword > Sets and resets loading state > selectedTheme 1`] = `"System"`;

exports[`Account > changePassword > Sets and resets loading state > syncState 1`] = `
{
  "appError": AppError {
    "code": 0,
    "display": undefined,
    "message": undefined,
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": undefined,
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": true,
  "loadingCount": 0,
  "newPassword": "",
  "password": "",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "d",
}
`;

exports[`Account > changePassword > Sets and resets loading state > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > changePassword > User not found > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > changePassword > User not found > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > changePassword > User not found > Storage.get('THEME') 1`] = `null`;

exports[`Account > changePassword > User not found > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > changePassword > User not found > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > changePassword > User not found > Storage.get('USERNAME') 1`] = `"k"`;

exports[`Account > changePassword > User not found > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"k","password":"2","notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/signup",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "k",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "k",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": "{"current_password":"2","new_password":"1","notes":[]}",
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "k",
        },
        "method": "PUT",
      },
      "name": "/account/change-password",
    },
  ],
]
`;

exports[`Account > changePassword > User not found > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > changePassword > User not found > mockDb 1`] = `
{
  "deletedNotes": undefined,
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > changePassword > User not found > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > changePassword > User not found > openedPopup 1`] = `undefined`;

exports[`Account > changePassword > User not found > selectedTheme 1`] = `"System"`;

exports[`Account > changePassword > User not found > syncState 1`] = `
{
  "appError": AppError {
    "code": 8,
    "display": {
      "form": true,
      "sync": true,
    },
    "message": "User not found",
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": {
      "fn": [Function],
    },
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": true,
  "loadingCount": 0,
  "newPassword": "1",
  "password": "2",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "k",
}
`;

exports[`Account > changePassword > User not found > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > changePassword > With encryption error > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > changePassword > With encryption error > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > changePassword > With encryption error > Storage.get('THEME') 1`] = `null`;

exports[`Account > changePassword > With encryption error > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > changePassword > With encryption error > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > changePassword > With encryption error > Storage.get('USERNAME') 1`] = `"d"`;

exports[`Account > changePassword > With encryption error > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"d","password":"1","notes":[],"deleted_notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/login",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "note": {
          "content": {
            "body": "",
            "delta": {
              "ops": [],
            },
            "title": "",
          },
          "id": "id",
          "timestamp": 0,
        },
      },
      "name": "new_note",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "notes": [
          {
            "content": {
              "body": "",
              "delta": {
                "ops": [],
              },
              "title": "",
            },
            "id": "id",
            "timestamp": 0,
          },
        ],
      },
      "name": "sync_local_notes",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {},
      "name": "get_all_notes",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
]
`;

exports[`Account > changePassword > With encryption error > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > changePassword > With encryption error > mockDb 1`] = `
{
  "deletedNotes": [],
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > changePassword > With encryption error > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [
    {
      "content": {
        "body": undefined,
        "content": {
          "content": [Circular],
          "id": "id",
          "timestamp": 0,
        },
        "delta": {},
        "id": "id",
        "timestamp": 0,
        "title": undefined,
      },
      "id": "id",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "6fb3ce26-82e0-408f-84bf-bd8cd64c35b2",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "b9754a63-843c-4f59-9aea-9a374aa1603d",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "ac4e006d-38d4-4373-af31-4a5f46fc5184",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "2cbe0086-4b6f-466f-9ec0-9a302480da6a",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "2e36d871-0de2-43e6-9cbc-3c77e5d154cb",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "b8ff4ac5-6541-49d2-9c79-4444d872481e",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "9a2f52b3-69ac-4158-a9f7-b79ba9dbafd3",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "81648517-86ff-4ed9-8bf7-941c32dd0fad",
      "timestamp": 0,
    },
    {
      "content": {
        "body": "amet consectetur adipisicing",
        "delta": {
          "ops": [
            {
              "insert": "Amet consectetur adipisicing\\n\\namet consectetur adipisicing\\namet consectetur adipisicing\\namet consectetur adipisicing\\n",
            },
          ],
        },
        "title": "Amet consectetur adipisicing",
      },
      "id": "6b24cde1-6118-4277-9791-8eab3c71cabb",
      "timestamp": 0,
    },
  ],
  "selectedNote": {
    "content": {
      "body": "😬ö",
      "delta": {
        "ops": [
          {
            "insert": "Note with special characters

😬ö
  sss
	
Ketchup
Salt 
Sugar

¯\\_(ツ)_/¯

──────────────────────────────────
──────▄▀▀▄────────────────▄▀▀▄────
─────▐▒▒▒▒▌──────────────▌▒▒▒▒▌───
─────▌▒▒▒▒▐─────────────▐▒▒▒▒▒▐───
────▐▒▒▒▒▒▒▌─▄▄▄▀▀▀▀▄▄▄─▌▒▒▒▒▒▒▌──
───▄▌▒▒▒▒▒▒▒▀▒▒▒▒▒▒▒▒▒▒▀▒▒▒▒▒▒▐───
─▄▀▒▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌───
▐▒▒▒▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐───
▌▒▒▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌──
▒▒▐▒▒▒▒▒▒▒▒▒▄▀▀▀▀▄▒▒▒▒▒▄▀▀▀▀▄▒▒▐──
▒▒▌▒▒▒▒▒▒▒▒▐▌─▄▄─▐▌▒▒▒▐▌─▄▄─▐▌▒▒▌─
▒▐▒▒▒▒▒▒▒▒▒▐▌▐█▄▌▐▌▒▒▒▐▌▐█▄▌▐▌▒▒▐─
▒▌▒▒▒▒▒▒▒▒▒▐▌─▀▀─▐▌▒▒▒▐▌─▀▀─▐▌▒▒▒▌
▒▌▒▒▒▒▒▒▒▒▒▒▀▄▄▄▄▀▒▒▒▒▒▀▄▄▄▄▀▒▒▒▒▐
▒▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▄▄▒▒▒▒▒▒▒▒▒▒▒▐
▒▌▒▒▒▒▒▒▒▒▒▒▒▒▀▒▀▒▒▒▀▒▒▒▀▒▀▒▒▒▒▒▒▐
▒▌▒▒▒▒▒▒▒▒▒▒▒▒▒▀▒▒▒▄▀▄▒▒▒▀▒▒▒▒▒▒▒▐
▒▐▒▒▒▒▒▒▒▒▒▒▀▄▒▒▒▄▀▒▒▒▀▄▒▒▒▄▀▒▒▒▒▐
▒▓▌▒▒▒▒▒▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒▐
▒▓▓▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌
▒▒▓▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌─
▒▒▓▓▀▀▄▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐──
▒▒▒▓▓▓▓▓▀▀▄▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▄▀▀▒▌─
▒▒▒▒▒▓▓▓▓▓▓▓▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▒▒▒▒▒▐─
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌
▒▒▒▒▒▒▒█▒█▒█▀▒█▀█▒█▒▒▒█▒█▒█▒▒▒▒▒▒▐
▒▒▒▒▒▒▒█▀█▒█▀▒█▄█▒▀█▒█▀▒▀▀█▒▒▒▒▒▒▐
▒▒▒▒▒▒▒▀▒▀▒▀▀▒▀▒▀▒▒▒▀▒▒▒▀▀▀▒▒▒▒▒▒▐
█▀▄▒█▀▄▒█▀▒█▀█▒▀█▀▒█▒█▒█▒█▄▒█▒▄▀▀▐
█▀▄▒█▀▄▒█▀▒█▄█▒▒█▒▒█▀█▒█▒█▀██▒█▒█▐
▀▀▒▒▀▒▀▒▀▀▒▀▒▀▒▒▀▒▒▀▒▀▒▀▒▀▒▒▀▒▒▀▀▐
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐

",
          },
        ],
      },
      "title": "Note with special characters",
    },
    "id": "7a7bccda-3fac-4465-b9c9-8f67dc1b5bdf",
    "timestamp": 0,
  },
}
`;

exports[`Account > changePassword > With encryption error > openedPopup 1`] = `undefined`;

exports[`Account > changePassword > With encryption error > selectedTheme 1`] = `"System"`;

exports[`Account > changePassword > With encryption error > syncState 1`] = `
{
  "appError": AppError {
    "code": 9,
    "display": {
      "form": true,
      "sync": true,
    },
    "message": "Note encryption/decryption failed",
    "originalError": [TypeError: Converting circular structure to JSON
    --> starting at object with constructor 'Object'
    --- property 'content' closes the circle],
    "retry": [Function],
    "retryConfig": {
      "fn": [Function],
    },
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": true,
  "loadingCount": 0,
  "newPassword": "2",
  "password": "1",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "d",
}
`;

exports[`Account > changePassword > With encryption error > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > changePassword > With server error > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > changePassword > With server error > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > changePassword > With server error > Storage.get('THEME') 1`] = `null`;

exports[`Account > changePassword > With server error > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > changePassword > With server error > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > changePassword > With server error > Storage.get('USERNAME') 1`] = `"d"`;

exports[`Account > changePassword > With server error > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"d","password":"1","notes":[],"deleted_notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/login",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "note": {
          "content": {
            "body": "",
            "delta": {
              "ops": [],
            },
            "title": "",
          },
          "id": "id",
          "timestamp": 0,
        },
      },
      "name": "new_note",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "notes": [
          {
            "content": {
              "body": "",
              "delta": {
                "ops": [],
              },
              "title": "",
            },
            "id": "id",
            "timestamp": 0,
          },
        ],
      },
      "name": "sync_local_notes",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": "{"current_password":"1","new_password":"2","notes":[{"id":"id","timestamp":0,"content":"content"}]}",
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "d",
        },
        "method": "PUT",
      },
      "name": "/account/change-password",
    },
  ],
]
`;

exports[`Account > changePassword > With server error > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > changePassword > With server error > mockDb 1`] = `
{
  "deletedNotes": [],
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > changePassword > With server error > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [
    {
      "content": {
        "body": "",
        "delta": {
          "ops": [],
        },
        "title": "",
      },
      "id": "id",
      "timestamp": 0,
    },
  ],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > changePassword > With server error > openedPopup 1`] = `undefined`;

exports[`Account > changePassword > With server error > selectedTheme 1`] = `"System"`;

exports[`Account > changePassword > With server error > syncState 1`] = `
{
  "appError": AppError {
    "code": 8,
    "display": {
      "form": true,
      "sync": true,
    },
    "message": "Server error",
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": {
      "fn": [Function],
    },
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": true,
  "loadingCount": 0,
  "newPassword": "2",
  "password": "1",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "d",
}
`;

exports[`Account > changePassword > With server error > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > deleteAccount > Deletes currently logged in account > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > deleteAccount > Deletes currently logged in account > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > deleteAccount > Deletes currently logged in account > Storage.get('THEME') 1`] = `null`;

exports[`Account > deleteAccount > Deletes currently logged in account > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > deleteAccount > Deletes currently logged in account > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > deleteAccount > Deletes currently logged in account > Storage.get('USERNAME') 1`] = `null`;

exports[`Account > deleteAccount > Deletes currently logged in account > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"d","password":"1","notes":[],"deleted_notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/login",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "note": {
          "content": {
            "body": "",
            "delta": {
              "ops": [],
            },
            "title": "",
          },
          "id": "id",
          "timestamp": 0,
        },
      },
      "name": "new_note",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "notes": [
          {
            "content": {
              "body": "",
              "delta": {
                "ops": [],
              },
              "title": "",
            },
            "id": "id",
            "timestamp": 0,
          },
        ],
      },
      "name": "sync_local_notes",
    },
  ],
  [
    "tauriApi",
    {
      "calledWith": {
        "kind": "warning",
        "message": "Are you sure?",
        "title": "Delete account",
      },
      "name": "plugin:dialog|ask",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": undefined,
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "d",
        },
        "method": "DELETE",
      },
      "name": "/account/delete",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "delete_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": false,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
]
`;

exports[`Account > deleteAccount > Deletes currently logged in account > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > deleteAccount > Deletes currently logged in account > mockDb 1`] = `
{
  "deletedNotes": [],
  "encryptedNotes": [],
  "users": {},
}
`;

exports[`Account > deleteAccount > Deletes currently logged in account > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [
    {
      "content": {
        "body": "",
        "delta": {
          "ops": [],
        },
        "title": "",
      },
      "id": "id",
      "timestamp": 0,
    },
  ],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > deleteAccount > Deletes currently logged in account > openedPopup 1`] = `undefined`;

exports[`Account > deleteAccount > Deletes currently logged in account > selectedTheme 1`] = `"System"`;

exports[`Account > deleteAccount > Deletes currently logged in account > syncState 1`] = `
{
  "appError": AppError {
    "code": 0,
    "display": undefined,
    "message": undefined,
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": undefined,
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": false,
  "loadingCount": 0,
  "newPassword": "",
  "password": "",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "",
}
`;

exports[`Account > deleteAccount > Deletes currently logged in account > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > KeyStore.getKey() 1`] = `undefined`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > Storage.get('THEME') 1`] = `null`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > Storage.get('USERNAME') 1`] = `null`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > allCalls 1`] = `
[
  [
    "tauriApi",
    {
      "calledWith": {
        "kind": "warning",
        "message": "Are you sure?",
        "title": "Delete account",
      },
      "name": "plugin:dialog|ask",
    },
  ],
]
`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > mockDb 1`] = `
{
  "deletedNotes": undefined,
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > openedPopup 1`] = `undefined`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > selectedTheme 1`] = `"System"`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > syncState 1`] = `
{
  "appError": AppError {
    "code": 0,
    "display": undefined,
    "message": undefined,
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": undefined,
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": false,
  "loadingCount": 0,
  "newPassword": "",
  "password": "",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "",
}
`;

exports[`Account > deleteAccount > Returns if ask dialog returns false > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > deleteAccount > Sets and resets loading state > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > deleteAccount > Sets and resets loading state > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > deleteAccount > Sets and resets loading state > Storage.get('THEME') 1`] = `null`;

exports[`Account > deleteAccount > Sets and resets loading state > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > deleteAccount > Sets and resets loading state > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > deleteAccount > Sets and resets loading state > Storage.get('USERNAME') 1`] = `null`;

exports[`Account > deleteAccount > Sets and resets loading state > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"d","password":"1","notes":[],"deleted_notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/login",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "note": {
          "content": {
            "body": "",
            "delta": {
              "ops": [],
            },
            "title": "",
          },
          "id": "id",
          "timestamp": 0,
        },
      },
      "name": "new_note",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "notes": [
          {
            "content": {
              "body": "",
              "delta": {
                "ops": [],
              },
              "title": "",
            },
            "id": "id",
            "timestamp": 0,
          },
        ],
      },
      "name": "sync_local_notes",
    },
  ],
  [
    "tauriApi",
    {
      "calledWith": {
        "kind": "warning",
        "message": "Are you sure?",
        "title": "Delete account",
      },
      "name": "plugin:dialog|ask",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": undefined,
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "d",
        },
        "method": "DELETE",
      },
      "name": "/account/delete",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "delete_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": false,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
]
`;

exports[`Account > deleteAccount > Sets and resets loading state > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > deleteAccount > Sets and resets loading state > mockDb 1`] = `
{
  "deletedNotes": [],
  "encryptedNotes": [],
  "users": {},
}
`;

exports[`Account > deleteAccount > Sets and resets loading state > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [
    {
      "content": {
        "body": "",
        "delta": {
          "ops": [],
        },
        "title": "",
      },
      "id": "id",
      "timestamp": 0,
    },
  ],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > deleteAccount > Sets and resets loading state > openedPopup 1`] = `undefined`;

exports[`Account > deleteAccount > Sets and resets loading state > selectedTheme 1`] = `"System"`;

exports[`Account > deleteAccount > Sets and resets loading state > syncState 1`] = `
{
  "appError": AppError {
    "code": 0,
    "display": undefined,
    "message": undefined,
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": undefined,
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": false,
  "loadingCount": 0,
  "newPassword": "",
  "password": "",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "",
}
`;

exports[`Account > deleteAccount > Sets and resets loading state > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > deleteAccount > Unauthorized > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > deleteAccount > Unauthorized > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > deleteAccount > Unauthorized > Storage.get('THEME') 1`] = `null`;

exports[`Account > deleteAccount > Unauthorized > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > deleteAccount > Unauthorized > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > deleteAccount > Unauthorized > Storage.get('USERNAME') 1`] = `"d"`;

exports[`Account > deleteAccount > Unauthorized > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"d","password":"1","notes":[],"deleted_notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/login",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "note": {
          "content": {
            "body": "",
            "delta": {
              "ops": [],
            },
            "title": "",
          },
          "id": "id",
          "timestamp": 0,
        },
      },
      "name": "new_note",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "notes": [
          {
            "content": {
              "body": "",
              "delta": {
                "ops": [],
              },
              "title": "",
            },
            "id": "id",
            "timestamp": 0,
          },
        ],
      },
      "name": "sync_local_notes",
    },
  ],
  [
    "tauriApi",
    {
      "calledWith": {
        "kind": "warning",
        "message": "Are you sure?",
        "title": "Delete account",
      },
      "name": "plugin:dialog|ask",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": undefined,
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "d",
        },
        "method": "DELETE",
      },
      "name": "/account/delete",
    },
  ],
]
`;

exports[`Account > deleteAccount > Unauthorized > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > deleteAccount > Unauthorized > mockDb 1`] = `
{
  "deletedNotes": [],
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > deleteAccount > Unauthorized > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [
    {
      "content": {
        "body": "",
        "delta": {
          "ops": [],
        },
        "title": "",
      },
      "id": "id",
      "timestamp": 0,
    },
  ],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > deleteAccount > Unauthorized > openedPopup 1`] = `undefined`;

exports[`Account > deleteAccount > Unauthorized > selectedTheme 1`] = `"System"`;

exports[`Account > deleteAccount > Unauthorized > syncState 1`] = `
{
  "appError": AppError {
    "code": 7,
    "display": {
      "sync": true,
    },
    "message": "Unauthorized",
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": {
      "fn": [Function],
    },
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": true,
  "loadingCount": 0,
  "newPassword": "",
  "password": "",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "d",
}
`;

exports[`Account > deleteAccount > Unauthorized > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > deleteAccount > User not found > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > deleteAccount > User not found > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > deleteAccount > User not found > Storage.get('THEME') 1`] = `null`;

exports[`Account > deleteAccount > User not found > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > deleteAccount > User not found > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > deleteAccount > User not found > Storage.get('USERNAME') 1`] = `"k"`;

exports[`Account > deleteAccount > User not found > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"k","password":"2","notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/signup",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "k",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "tauriApi",
    {
      "calledWith": {
        "kind": "warning",
        "message": "Are you sure?",
        "title": "Delete account",
      },
      "name": "plugin:dialog|ask",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "k",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": undefined,
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "k",
        },
        "method": "DELETE",
      },
      "name": "/account/delete",
    },
  ],
]
`;

exports[`Account > deleteAccount > User not found > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > deleteAccount > User not found > mockDb 1`] = `
{
  "deletedNotes": undefined,
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > deleteAccount > User not found > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > deleteAccount > User not found > openedPopup 1`] = `undefined`;

exports[`Account > deleteAccount > User not found > selectedTheme 1`] = `"System"`;

exports[`Account > deleteAccount > User not found > syncState 1`] = `
{
  "appError": AppError {
    "code": 7,
    "display": {
      "sync": true,
    },
    "message": "User not found",
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": {
      "fn": [Function],
    },
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": true,
  "loadingCount": 0,
  "newPassword": "",
  "password": "",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "k",
}
`;

exports[`Account > deleteAccount > User not found > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;

exports[`Account > deleteAccount > With server error > KeyStore.getKey() 1`] = `CryptoKey {}`;

exports[`Account > deleteAccount > With server error > Storage.get('MENU_WIDTH') 1`] = `null`;

exports[`Account > deleteAccount > With server error > Storage.get('THEME') 1`] = `null`;

exports[`Account > deleteAccount > With server error > Storage.get('UPDATE_SEEN') 1`] = `null`;

exports[`Account > deleteAccount > With server error > Storage.get('UPDATE_STRATEGY') 1`] = `null`;

exports[`Account > deleteAccount > With server error > Storage.get('USERNAME') 1`] = `"d"`;

exports[`Account > deleteAccount > With server error > allCalls 1`] = `
[
  [
    "request",
    {
      "calledWith": {
        "body": "{"username":"d","password":"1","notes":[],"deleted_notes":[]}",
        "headers": {
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
      "name": "/auth/login",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "accessToken": "test-token",
        "username": "d",
      },
      "name": "set_access_token",
    },
  ],
  [
    "emits",
    {
      "calledWith": {
        "data": {
          "is_logged_in": true,
        },
        "isFrontendEmit": true,
      },
      "name": "auth",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "note": {
          "content": {
            "body": "",
            "delta": {
              "ops": [],
            },
            "title": "",
          },
          "id": "id",
          "timestamp": 0,
        },
      },
      "name": "new_note",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "notes": [
          {
            "content": {
              "body": "",
              "delta": {
                "ops": [],
              },
              "title": "",
            },
            "id": "id",
            "timestamp": 0,
          },
        ],
      },
      "name": "sync_local_notes",
    },
  ],
  [
    "tauriApi",
    {
      "calledWith": {
        "kind": "warning",
        "message": "Are you sure?",
        "title": "Delete account",
      },
      "name": "plugin:dialog|ask",
    },
  ],
  [
    "invoke",
    {
      "calledWith": {
        "username": "d",
      },
      "name": "get_access_token",
    },
  ],
  [
    "request",
    {
      "calledWith": {
        "body": undefined,
        "headers": {
          "Authorization": "Bearer test-token",
          "Content-Security-Policy": "default-src 'self'; connect-src http://localhost:8000;",
          "Content-Type": "application/json",
          "X-Username": "d",
        },
        "method": "DELETE",
      },
      "name": "/account/delete",
    },
  ],
]
`;

exports[`Account > deleteAccount > With server error > document.body.outerHTML 1`] = `"<body class="theme--system"></body>"`;

exports[`Account > deleteAccount > With server error > mockDb 1`] = `
{
  "deletedNotes": [],
  "encryptedNotes": [],
  "users": {
    "d": "1",
  },
}
`;

exports[`Account > deleteAccount > With server error > noteState 1`] = `
{
  "extraSelectedNotes": [],
  "notes": [
    {
      "content": {
        "body": "",
        "delta": {
          "ops": [],
        },
        "title": "",
      },
      "id": "id",
      "timestamp": 0,
    },
  ],
  "selectedNote": {
    "content": {
      "body": "",
      "delta": {
        "ops": [],
      },
      "title": "",
    },
    "id": "id",
    "timestamp": 0,
  },
}
`;

exports[`Account > deleteAccount > With server error > openedPopup 1`] = `undefined`;

exports[`Account > deleteAccount > With server error > selectedTheme 1`] = `"System"`;

exports[`Account > deleteAccount > With server error > syncState 1`] = `
{
  "appError": AppError {
    "code": 7,
    "display": {
      "sync": true,
    },
    "message": "Server error",
    "originalError": undefined,
    "retry": [Function],
    "retryConfig": {
      "fn": [Function],
    },
  },
  "encryptedNotesCache": Map {},
  "isLoggedIn": true,
  "loadingCount": 0,
  "newPassword": "",
  "password": "",
  "unsyncedNotes": UnsyncedNotesManager {
    "deleted": [],
    "edited": Set {},
    "new": "",
  },
  "username": "d",
}
`;

exports[`Account > deleteAccount > With server error > updateState 1`] = `
{
  "isAvailable": false,
  "isDownloading": false,
  "strategy": "manual",
}
`;
